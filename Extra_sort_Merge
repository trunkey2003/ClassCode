void merge(int arr[], int left, int m, int right)
{
    int i, j, k;
    int n1 = m - left + 1;
    int n2 =  right - m;
 
    int leftArr[n1], rightArr[n2];
 
    for (i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        rightArr[j] = arr[m + 1+ j];
 
    i = 0;
    j = 0; 
    k = left;
    while (i < n1 && j < n2)
    {
        if (leftArr[i] <= rightArr[j])
        {
            arr[k] = leftArr[i];
            i++;
        }
        else
        {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }
 
    while (i < n1)
    {
        arr[k] = leftArr[i];
        i++;
        k++;
    }
 
    while (j < n2)
    {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}
 
void mergeSort(int arr[], int left, int right)
{
    if (left < right)
    {
        int m = left+(right-left)/2;
 
        mergeSort(arr, left, m);
        mergeSort(arr, m+1, right);
 
        merge(arr, left, m, right);
    }
}

int main(){
    int n;
    int a[1000];
    
    cin >> n;
    
    for (int i = 0; i < n; i ++){
        cin >> a[i];
    }

    mergeSort(a, 0, n - 1);

    for (int i = 0; i < n; i++) {
        cout << a[i] << endl;
    }

    return 0;
}
